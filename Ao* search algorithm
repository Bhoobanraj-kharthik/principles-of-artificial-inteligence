Aim: To find the optimal solution path in a graph where nodes can represent tasks that are either dependent (AND) or independent (OR).

Procedure: It uses a combination of forward and backward propagation to calculate the cost of paths and updates the graph iteratively until the optimal path is found.

Algorithm:

Start with the initial node.

Expand nodes and calculate their costs using a heuristic function.

Update the graph by marking nodes as solved or unsolvable.

Repeat until the starting node is marked as solved.

class Graph:
    def __init__(self, graph, heuristic, start):
        self.graph = graph
        self.heuristic = heuristic
        self.start = start
        self.solution = {}

    def apply_ao_star(self):
        self.ao_star(self.start, False)

    def ao_star(self, node, backtrack):
        print(f"Processing Node: {node}")
        if node not in self.graph:
            return
        min_cost, child_nodes = self.get_minimum_cost_child_nodes(node)
        self.solution[node] = child_nodes
        for child in child_nodes:
            self.ao_star(child, True)

    def get_minimum_cost_child_nodes(self, node):
        min_cost = float('inf')
        best_child_nodes = []
        for children in self.graph[node]:
            cost = sum(self.heuristic[child] for child in children)
            if cost < min_cost:
                min_cost = cost
                best_child_nodes = children
        return min_cost, best_child_nodes

# Example graph and heuristic values
graph = {
    'A': [['B', 'C'], ['D']],
    'B': [['E'], ['F']],
    'C': [['G']],
    'D': [['H']],
    'E': [],
    'F': [],
    'G': [],
    'H': []
}

heuristic = {
    'A': 1, 'B': 2, 'C': 2, 'D': 4,
    'E': 5, 'F': 3, 'G': 6, 'H': 7
}

# Initialize and run AO* algorithm
start_node = 'A'
graph_obj = Graph(graph, heuristic, start_node)
graph_obj.apply_ao_star()
print("Solution Graph:", graph_obj.solution)


Output: The optimal path from the starting node to the goal node.

Result: A solution tree that represents the best path to achieve the goal.
